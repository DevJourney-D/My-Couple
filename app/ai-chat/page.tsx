// app/ai-chat/page.tsx
'use client';

import Link from 'next/link';
import React, { useState, useRef, useEffect } from 'react';

// =================================================================
// ‡∏£‡∏∞‡∏ö‡∏ö Logging
// =================================================================
const logUserAction = (action: string, details: Record<string, unknown> = {}) => {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        page: 'ai-chat',
        action,
        details,
        userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'Unknown'
    };
    
    console.log('ü§ñ AI Chat Log:', logEntry);
    
    // ‡πÄ‡∏Å‡πá‡∏ö log ‡πÉ‡∏ô localStorage
    try {
        const existingLogs = JSON.parse(localStorage.getItem('appLogs') || '[]');
        existingLogs.push(logEntry);
        // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 1000 logs ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (existingLogs.length > 1000) {
            existingLogs.splice(0, existingLogs.length - 1000);
        }
        localStorage.setItem('appLogs', JSON.stringify(existingLogs));
    } catch (error) {
        console.error('Error saving log:', error);
    }
};

// =================================================================
// ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
// =================================================================
const BackIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <polyline points="15 18 9 12 15 6" />
    </svg>
);

const DeleteIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <polyline points="3 6 5 6 21 6"/>
        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
        <line x1="10" y1="11" x2="10" y2="17"/>
        <line x1="14" y1="11" x2="14" y2="17"/>
    </svg>
);

const SendIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <line x1="22" y1="2" x2="11" y2="13"></line>
        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
    </svg>
);

const BotIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
        <circle cx="8.5" cy="8.5" r="1.5"></circle>
        <path d="M8 12h8"></path>
        <circle cx="15.5" cy="8.5" r="1.5"></circle>
    </svg>
);

const HeartIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
    </svg>
);

const RefreshIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <polyline points="23 4 23 10 17 10"></polyline>
        <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>
    </svg>
);

// =================================================================
// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI
// =================================================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI API
const getAIResponse = async (userMessage: string): Promise<string> => {
    try {
        // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å localStorage
        const token = localStorage.getItem('auth_token');
        if (!token) {
            return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå AI Chat ‡∏Ñ‡πà‡∏∞ üîê';
        }

        const response = await fetch('/api/ai-chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify({ message: userMessage }),
        });

        if (response.status === 401) {
            // Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            localStorage.removeItem('auth_token');
            return '‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AI Chat üîÑ';
        }

        if (!response.ok) {
            const errorData = await response.json();
            console.error('API Error:', errorData);
            return '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòÖ';
        }

        const data = await response.json();
        return data.response || '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö üòÖ';
    } catch (error) {
        console.error('Error calling AI API:', error);
        // Fallback response
        return '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä';
    }
};

// =================================================================
// ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó AI
// =================================================================
interface Message {
    id: number;
    text: string;
    sender: 'user' | 'ai';
    timestamp: Date;
    emotion?: string;
    intensity?: number;
}

interface ApiMessage {
    id: number;
    role: 'user' | 'model';
    content: string;
    created_at: string;
}

interface EmotionDetection {
    detected: boolean;
    primary: string;
    secondary: string[];
    intensity: number;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
const detectEmotion = (text: string): EmotionDetection => {
    const lowerText = text.toLowerCase();
    
    const emotionKeywords = {
        sad: ['‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à', '‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á', '‡∏ó‡πâ‡∏≠', '‡∏´‡∏î‡∏´‡∏π‡πà', '‡πÄ‡∏´‡∏á‡∏≤', '‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ', '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤'],
        happy: ['‡∏î‡∏µ‡πÉ‡∏à', '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', '‡∏™‡∏ô‡∏∏‡∏Å', '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ', '‡∏õ‡∏•‡∏∑‡πâ‡∏°', '‡∏£‡∏±‡∏Å', '‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°'],
        angry: ['‡πÇ‡∏Å‡∏£‡∏ò', '‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î', '‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç', '‡∏á‡∏∏‡πà‡∏ô‡∏á‡πà‡∏≤‡∏ô', '‡πÄ‡∏ü‡∏µ‡πâ‡∏¢‡∏ß', '‡∏´‡∏±‡∏ß‡πÄ‡∏™‡∏µ‡∏¢'],
        anxious: ['‡∏Å‡∏±‡∏á‡∏ß‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡∏Å‡∏•‡∏±‡∏ß', '‡∏ß‡∏¥‡∏ï‡∏Å', '‡∏´‡πà‡∏ß‡∏á', '‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô'],
        confused: ['‡∏á‡∏á', '‡∏™‡∏±‡∏ö‡∏™‡∏ô', '‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à', '‡∏•‡∏±‡∏á‡πÄ‡∏•', '‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ'],
        loving: ['‡∏£‡∏±‡∏Å', '‡∏´‡∏ß‡∏≤‡∏ô', '‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á', '‡∏ä‡∏≠‡∏ö', '‡∏´‡∏•‡∏á‡∏£‡∏±‡∏Å', '‡πÉ‡∏™‡πà‡πÉ‡∏à']
    };

    let primaryEmotion = 'neutral';
    let maxMatches = 0;
    const secondaryEmotions: string[] = [];
    let totalIntensity = 0;

    Object.entries(emotionKeywords).forEach(([emotion, keywords]) => {
        const matches = keywords.filter(keyword => lowerText.includes(keyword)).length;
        if (matches > 0) {
            totalIntensity += matches;
            if (matches > maxMatches) {
                if (primaryEmotion !== 'neutral') {
                    secondaryEmotions.push(primaryEmotion);
                }
                primaryEmotion = emotion;
                maxMatches = matches;
            } else {
                secondaryEmotions.push(emotion);
            }
        }
    });

    const intensity = Math.min(Math.ceil(totalIntensity * 2), 10);

    return {
        detected: primaryEmotion !== 'neutral',
        primary: primaryEmotion,
        secondary: secondaryEmotions.slice(0, 2),
        intensity
    };
};

export default function AiChatPage() {
    const [messages, setMessages] = useState<Message[]>([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingHistory, setIsLoadingHistory] = useState(true);
    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [isLoadingMore, setIsLoadingMore] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏≤‡∏Å API
    const loadChatHistory = async (page: number = 1, append: boolean = false) => {
        try {
            const token = localStorage.getItem('auth_token');
            if (!token) {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
                setMessages([
                    { 
                        id: 1, 
                        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä" ü•∞\n\n‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏¢! ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡πÄ‡∏•‡πà‡∏≤‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏∏‡∏Å‡∏ï‡∏•‡∏Å ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤ ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏î‡∏ó ‡∏™‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏î‡πâ‡∏ß‡∏¢! üåü\n\n‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏™‡∏°‡∏≠! ‚ú®', 
                        sender: 'ai', 
                        timestamp: new Date(),
                        emotion: 'happy',
                        intensity: 8
                    },
                ]);
                setIsLoadingHistory(false);
                return;
            }

            if (append) setIsLoadingMore(true);

            const response = await fetch(`/api/ai-chat?page=${page}&limit=30`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                },
            });

            if (response.ok) {
                const data = await response.json();
                if (data.messages && data.messages.length > 0) {
                    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô UI
                    const formattedMessages: Message[] = data.messages.map((msg: ApiMessage, index: number) => ({
                        id: (page - 1) * 30 + index + 1,
                        text: msg.content,
                        sender: msg.role === 'user' ? 'user' : 'ai',
                        timestamp: new Date(msg.created_at),
                        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
                        emotion: undefined,
                        intensity: undefined,
                    }));
                    
                    if (append) {
                        setMessages(prevMessages => [...formattedMessages, ...prevMessages]);
                    } else {
                        setMessages(formattedMessages);
                    }

                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pagination info
                    if (data.pagination) {
                        setTotalPages(data.pagination.totalPages);
                        setCurrentPage(page);
                    }
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
                    setMessages([
                        { 
                            id: 1, 
                            text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä" AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå üíï\n\n‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå\n\n‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÇ‡∏Å‡∏£‡∏ò ‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ ‚ú®', 
                            sender: 'ai', 
                            timestamp: new Date(),
                            emotion: 'loving',
                            intensity: 5
                        },
                    ]);
                }
            } else {
                // ‡∏ñ‡πâ‡∏≤ API error ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
                setMessages([
                    { 
                        id: 1, 
                        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä" AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå üíï\n\n‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå\n\n‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÇ‡∏Å‡∏£‡∏ò ‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ ‚ú®', 
                        sender: 'ai', 
                        timestamp: new Date(),
                        emotion: 'loving',
                        intensity: 5
                    },
                ]);
            }
        } catch (error) {
            console.error('Error loading chat history:', error);
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
            setMessages([
                { 
                    id: 1, 
                    text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä" AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå üíï\n\n‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå\n\n‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÇ‡∏Å‡∏£‡∏ò ‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ ‚ú®', 
                    sender: 'ai', 
                    timestamp: new Date(),
                    emotion: 'loving',
                    intensity: 5
                },
            ]);
        } finally {
            if (append) setIsLoadingMore(false);
            setIsLoadingHistory(false);
        }
    };

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const loadMoreMessages = async () => {
        if (currentPage < totalPages && !isLoadingMore) {
            await loadChatHistory(currentPage + 1, true);
        }
    };

    // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
    useEffect(() => {
        loadChatHistory();
    }, []);

    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    // Log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    useEffect(() => {
        if (!isLoadingHistory) {
            logUserAction('page_view', {
                messagesCount: messages.length,
                timestamp: new Date().toISOString()
            });
        }
    }, [isLoadingHistory, messages.length]);

    const handleSendMessage = async (e: React.FormEvent) => {
        e.preventDefault();
        if (input.trim() === '' || isLoading) return;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const userEmotion = detectEmotion(input);

        const userMessage: Message = {
            id: Date.now(),
            text: input,
            sender: 'user',
            timestamp: new Date(),
            emotion: userEmotion.detected ? userEmotion.primary : undefined,
            intensity: userEmotion.detected ? userEmotion.intensity : undefined,
        };
        
        // Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
        logUserAction('send_message', {
            messageLength: input.length,
            messageType: 'user',
            emotion: {
                detected: userEmotion.detected,
                primary: userEmotion.primary,
                secondary: userEmotion.secondary,
                intensity: userEmotion.intensity
            },
            hasKeywords: {
                love: input.toLowerCase().includes('‡∏£‡∏±‡∏Å'),
                greeting: input.toLowerCase().includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ'),
                activity: input.toLowerCase().includes('‡∏ó‡∏≥'),
                relationship: input.toLowerCase().includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå'),
                problem: input.toLowerCase().includes('‡∏õ‡∏±‡∏ç‡∏´‡∏≤'),
                help: input.toLowerCase().includes('‡∏ä‡πà‡∏ß‡∏¢')
            },
            timestamp: new Date().toISOString()
        });
        
        setMessages((prev) => [...prev, userMessage]);
        const currentInput = input;
        setInput('');
        setIsLoading(true);

        try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI API
            const aiResponseText = await getAIResponse(currentInput);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI
            const aiEmotion = detectEmotion(aiResponseText);
            
            const aiResponse: Message = {
                id: Date.now() + 1,
                text: aiResponseText,
                sender: 'ai',
                timestamp: new Date(),
                emotion: aiEmotion.detected ? aiEmotion.primary : undefined,
                intensity: aiEmotion.detected ? aiEmotion.intensity : undefined,
            };
            
            // Log ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
            logUserAction('ai_response', {
                responseLength: aiResponseText.length,
                responseType: 'ai',
                userMessageLength: currentInput.length,
                userEmotion: userEmotion,
                aiEmotion: aiEmotion,
                responseTime: 'realtime',
                timestamp: new Date().toISOString()
            });
            
            setMessages((prev) => [...prev, aiResponse]);
        } catch (error) {
            console.error('Error getting AI response:', error);
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            const errorResponse: Message = {
                id: Date.now() + 1,
                text: '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòÖ',
                sender: 'ai',
                timestamp: new Date(),
            };
            setMessages((prev) => [...prev, errorResponse]);
        } finally {
            setIsLoading(false);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
    const handleNewChat = () => {
        setShowDeleteConfirm(true);
    };

    const confirmNewChat = async () => {
        try {
            const token = localStorage.getItem('auth_token');
            if (token) {
                const response = await fetch('/api/ai-chat', {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });

                if (response.ok) {
                    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pagination
                    setCurrentPage(1);
                    setTotalPages(1);
                }
            }
        } catch (error) {
            console.error('Error deleting chat history:', error);
        }

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        setMessages([
            { 
                id: 1, 
                text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä" AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå üíï\n\n‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå\n\n‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÇ‡∏Å‡∏£‡∏ò ‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ ‚ú®', 
                sender: 'ai', 
                timestamp: new Date(),
                emotion: 'loving',
                intensity: 5
            },
        ]);
        
        // ‡∏•‡πâ‡∏≤‡∏á input
        setInput('');
        setShowDeleteConfirm(false);
        
        // Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
        logUserAction('new_chat_started', {
            timestamp: new Date().toISOString()
        });
    };

    const cancelNewChat = () => {
        setShowDeleteConfirm(false);
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    const quickSuggestions = [
        "‡πÄ‡∏Æ‡πâ‡∏¢ ‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä ‡∏â‡∏±‡∏ô‡πÄ‡∏ã‡πá‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢ üò©",
        "‡πÄ‡∏£‡∏≤‡∏ó‡∏∞‡πÄ‡∏•‡∏≤‡∏∞‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏á‡∏±‡πâ‡∏ô‡∏â‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ?",
        "‡πÄ‡∏•‡πà‡∏≤‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ üìö",
        "‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏∏‡∏Å‡∏ï‡∏•‡∏Å‡∏°‡∏≤‡∏™‡∏±‡∏Å‡∏≠‡∏±‡∏ô ‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≥‡∏ö‡πâ‡∏≤‡∏á üòÇ",
        "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏• 'I love you' ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
        "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì 15 + 25 √ó 2 ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢ üßÆ",
        "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏î‡∏ó‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏û‡∏£‡∏™‡πå‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å üíï",
        "‡∏™‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡∏Å‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢? üë©‚Äçüç≥",
        "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üéÆ"
    ];

    const getEmotionIcon = (emotion?: string) => {
        const emotionIcons: Record<string, string> = {
            sad: 'üò¢',
            happy: 'üòä',
            angry: 'üò†',
            anxious: 'üò∞',
            confused: 'üòï',
            loving: 'ü•∞',
            neutral: 'üí≠'
        };
        return emotionIcons[emotion || 'neutral'] || 'üí≠';
    };

    const getEmotionColor = (emotion?: string) => {
        const emotionColors: Record<string, string> = {
            sad: 'text-blue-600',
            happy: 'text-yellow-500',
            angry: 'text-red-500',
            anxious: 'text-orange-500',
            confused: 'text-purple-500',
            loving: 'text-pink-500',
            neutral: 'text-gray-500'
        };
        return emotionColors[emotion || 'neutral'] || 'text-gray-500';
    };

    const handleQuickSuggestion = (suggestion: string) => {
        if (isLoading) return;
        
        // Log ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏ß‡∏ô
        logUserAction('quick_suggestion_click', {
            suggestion,
            timestamp: new Date().toISOString()
        });
        
        setInput(suggestion);
    };

    const formatTime = (timestamp: Date) => {
        return timestamp.toLocaleTimeString('th-TH', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    };

    return (
        <main className="flex flex-col h-screen bg-blue-50">
            {/* ‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö */}
            {showDeleteConfirm && (
                <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
                    <div className="bg-white rounded-2xl p-6 max-w-sm w-full shadow-2xl">
                        <div className="text-center">
                            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <DeleteIcon />
                            </div>
                            <h3 className="text-lg font-semibold text-gray-900 mb-2">
                                ‡∏•‡∏ö‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?
                            </h3>
                            <p className="text-sm text-gray-600 mb-6">
                                ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ 
                                ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
                            </p>
                            <div className="flex gap-3">
                                <button
                                    onClick={cancelNewChat}
                                    className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-colors"
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                                <button
                                    onClick={confirmNewChat}
                                    className="flex-1 px-4 py-2 text-white bg-red-500 rounded-xl hover:bg-red-600 transition-colors"
                                >
                                    ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */}
            <header className="flex items-center p-4 bg-white/90 backdrop-blur-md shadow-lg border-b border-pink-100">
                <Link href="/dashboard" className="flex items-center gap-2 text-gray-700 hover:text-pink-600 transition-colors">
                    <BackIcon />
                </Link>
                <div className="text-center flex-grow">
                                        <h1 className="text-xl font-bold text-blue-700">
                        ü§ñ AI Chat Assistant
                    </h1>
                    {isLoading ? (
                        <p className="text-xs text-pink-500 font-medium animate-pulse flex items-center justify-center gap-1">
                            <HeartIcon />
                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...
                        </p>
                    ) : (
                        <p className="text-xs text-emerald-500 font-medium flex items-center justify-center gap-1">
                            <span className="w-2 h-2 bg-emerald-500 rounded-full animate-pulse"></span>
                            ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
                        </p>
                    )}
                </div>
                {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà */}
                <div className="flex items-center gap-2">
                    {messages.length > 1 && (
                        <button
                            onClick={handleNewChat}
                            disabled={isLoading}
                            className="flex items-center gap-1 px-3 py-2 text-xs bg-amber-500 text-white rounded-full hover:bg-amber-600 transition-all duration-200 disabled:bg-gray-400 shadow-md hover:shadow-lg transform hover:scale-105 disabled:transform-none"
                            title="‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"
                        >
                            <RefreshIcon />
                            <span className="hidden sm:inline">‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà</span>
                        </button>
                    )}
                </div>
            </header>

            {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
            <div className="flex-grow p-4 overflow-y-auto">
                <div className="max-w-3xl mx-auto space-y-6">
                    {/* Pagination Controls - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤ */}
                    {currentPage < totalPages && !isLoadingHistory && (
                        <div className="flex justify-center mb-4">
                            <button
                                onClick={loadMoreMessages}
                                disabled={isLoadingMore}
                                className="flex items-center gap-2 px-4 py-2 text-sm text-purple-600 bg-white/70 backdrop-blur-sm rounded-full border border-purple-200 hover:border-purple-300 hover:bg-purple-50 transition-all duration-200 shadow-sm hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                {isLoadingMore ? (
                                    <>
                                        <div className="w-4 h-4 border-2 border-purple-300 border-t-purple-600 rounded-full animate-spin"></div>
                                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
                                    </>
                                ) : (
                                    <>
                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                                        </svg>
                                        ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤ ({totalPages - currentPage} ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
                                    </>
                                )}
                            </button>
                        </div>
                    )}

                    {/* Loading indicator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å */}
                    {isLoadingHistory && (
                        <div className="flex justify-center items-center py-8">
                            <div className="flex items-center gap-3 text-gray-500">
                                <div className="w-6 h-6 border-2 border-pink-300 border-t-pink-600 rounded-full animate-spin"></div>
                                <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤...</span>
                            </div>
                        </div>
                    )}
                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
                    {messages.length > 3 && !isLoading && (
                        <div className="flex justify-center mb-4">
                            <button
                                onClick={handleNewChat}
                                className="flex items-center gap-2 px-4 py-2 text-sm text-gray-600 bg-white/70 backdrop-blur-sm rounded-full border border-gray-200 hover:border-pink-300 hover:text-pink-600 transition-all duration-200 shadow-sm hover:shadow-md"
                            >
                                <DeleteIcon />
                                ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            </button>
                        </div>
                    )}

                    {messages.map((message) => (
                        <div
                            key={message.id}
                            className={`flex items-end gap-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                            {message.sender === 'ai' && (
                                <div className="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white shadow-lg flex-shrink-0">
                                    <BotIcon />
                                </div>
                            )}
                            <div className="flex flex-col gap-1 max-w-xs md:max-w-md">
                                <div
                                    className={`px-5 py-3 rounded-2xl relative ${message.sender === 'user'
                                        ? 'bg-blue-500 text-white rounded-br-md shadow-lg'
                                        : 'bg-white text-gray-800 rounded-bl-md shadow-lg border border-pink-100'
                                    }`}
                                >
                                    {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå */}
                                    {message.emotion && (
                                        <div className={`absolute -top-2 ${message.sender === 'user' ? '-left-2' : '-right-2'} w-6 h-6 rounded-full bg-white shadow-md flex items-center justify-center text-sm`}>
                                            {getEmotionIcon(message.emotion)}
                                        </div>
                                    )}
                                    <p className="leading-relaxed">{message.text}</p>
                                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå */}
                                    {message.emotion && message.intensity && message.intensity > 6 && (
                                        <div className="mt-2 text-xs opacity-60">
                                            <span className={getEmotionColor(message.emotion)}>
                                                ‚óè ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {message.emotion} (‡∏£‡∏∞‡∏î‡∏±‡∏ö {message.intensity}/10)
                                            </span>
                                        </div>
                                    )}
                                </div>
                                <p className={`text-xs text-gray-400 px-2 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>
                                    {formatTime(message.timestamp)}
                                </p>
                            </div>
                            {message.sender === 'user' && (
                                <div className="w-10 h-10 rounded-full bg-amber-500 flex items-center justify-center text-white shadow-lg flex-shrink-0">
                                    <span className="text-sm font-bold">‡∏Ñ‡∏∏‡∏ì</span>
                                </div>
                            )}
                        </div>
                    ))}
                    
                    {/* ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Ç‡∏ì‡∏∞ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå */}
                    {isLoading && (
                        <div className="flex items-end gap-3 justify-start">
                            <div className="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white shadow-lg flex-shrink-0">
                                <BotIcon />
                            </div>
                            <div className="px-5 py-4 rounded-2xl bg-white text-gray-800 rounded-bl-md shadow-lg border border-pink-100">
                                <div className="flex items-center gap-2 mb-2">
                                    <span className="text-xs text-pink-500">üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å...</span>
                                </div>
                                <div className="flex items-center gap-2">
                                    <span className="w-2 h-2 bg-pink-400 rounded-full animate-bounce"></span>
                                    <span className="w-2 h-2 bg-purple-400 rounded-full animate-bounce delay-150"></span>
                                    <span className="w-2 h-2 bg-blue-400 rounded-full animate-bounce delay-300"></span>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á AI */}
                    {messages.length === 1 && !isLoading && (
                        <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-5 border border-purple-200 shadow-lg mb-4">
                            <h3 className="text-lg font-bold text-gray-800 mb-3 flex items-center gap-2">
                                üåü ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä
                            </h3>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üíï</div>
                                    <div className="text-xs font-semibold text-gray-700">‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤<br/>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üìö</div>
                                    <div className="text-xs font-semibold text-gray-700">‡πÄ‡∏•‡πà‡∏≤‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô<br/>‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏±‡πâ‡∏ô</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üòÇ</div>
                                    <div className="text-xs font-semibold text-gray-700">‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏∏‡∏Å‡∏ï‡∏•‡∏Å<br/>‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≥‡πÜ</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üåê</div>
                                    <div className="text-xs font-semibold text-gray-700">‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤<br/>‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üßÆ</div>
                                    <div className="text-xs font-semibold text-gray-700">‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç<br/>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üéØ</div>
                                    <div className="text-xs font-semibold text-gray-700">‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏î‡∏ó<br/>‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üë©‚Äçüç≥</div>
                                    <div className="text-xs font-semibold text-gray-700">‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£<br/>‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
                                </div>
                                <div className="bg-white/70 rounded-lg p-3 text-center border border-purple-100">
                                    <div className="text-2xl mb-1">üéÆ</div>
                                    <div className="text-xs font-semibold text-gray-700">‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°<br/>‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤</div>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏ß‡∏ô */}
                    {messages.length === 1 && !isLoading && (
                        <div className="bg-white/70 backdrop-blur-sm rounded-2xl p-5 border border-pink-200 shadow-lg">
                            <h3 className="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
                                üí° ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à
                            </h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {quickSuggestions.map((suggestion, index) => (
                                    <button
                                        key={index}
                                        onClick={() => handleQuickSuggestion(suggestion)}
                                        className="text-left p-4 bg-amber-50 hover:bg-amber-100 rounded-xl text-sm text-gray-700 transition-all duration-200 border border-amber-200 hover:border-amber-300 hover:shadow-md hover:scale-105 transform"
                                    >
                                        <div className="flex items-start gap-2">
                                            <span className="text-base">üí≠</span>
                                            <span className="leading-relaxed">{suggestion}</span>
                                        </div>
                                    </button>
                                ))}
                            </div>
                            <div className="mt-4 text-xs text-gray-500 text-center">
                                üíù ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                            </div>
                        </div>
                    )}
                    
                    <div ref={messagesEndRef} />
                </div>
            </div>

            {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
            <footer className="p-4 bg-white/90 backdrop-blur-md border-t border-pink-100">
                <div className="max-w-3xl mx-auto">
                    <form onSubmit={handleSendMessage} className="flex items-center gap-3">
                        <input
                            type="text"
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            placeholder="‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏°‡∏±‡πâ‡∏¢? ‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á üòä..."
                            className="flex-grow px-5 py-4 bg-white border-2 border-pink-200 rounded-full focus:ring-2 focus:ring-pink-300 focus:border-pink-400 text-gray-800 placeholder-gray-500 shadow-lg transition-all duration-200"
                            disabled={isLoading}
                        />
                        <button
                            type="submit"
                            className="flex-shrink-0 w-14 h-14 flex items-center justify-center text-white bg-blue-600 rounded-full hover:bg-blue-700 transition-all duration-200 disabled:bg-gray-400 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:transform-none"
                            disabled={isLoading || input.trim() === ''}
                        >
                            <SendIcon />
                        </button>
                    </form>
                    <p className="text-center text-xs text-gray-500 mt-2">
                        ÔøΩ ‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä AI - ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á
                    </p>
                </div>
            </footer>
        </main>
    );
}
