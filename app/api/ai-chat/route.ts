// app/api/ai-chat/route.ts
import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

interface JwtPayload {
  userId: string;
  username: string;
  iat?: number;
  exp?: number;
}

// ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
interface EmotionAnalysis {
  primary: string;
  intensity: number;
  tone: string;
}

interface ContextAnalysis {
  problemType: string;
  severity: string;
  needs: string[];
}

function analyzeEmotion(message: string): EmotionAnalysis {
  const lowerMessage = message.toLowerCase();
  
  // ‡∏Ñ‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
  const emotions = {
    sad: ['‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡∏´‡∏î‡∏´‡∏π‡πà', '‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á', '‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à', '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤', '‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ', '‡πÄ‡∏´‡∏á‡∏≤'],
    angry: ['‡πÇ‡∏Å‡∏£‡∏ò', '‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î', '‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç', '‡∏Ç‡∏±‡∏î‡πÉ‡∏à', '‡∏´‡∏±‡∏ß‡πÄ‡∏™‡∏µ‡∏¢'],
    worried: ['‡∏Å‡∏±‡∏á‡∏ß‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡∏Å‡∏•‡∏±‡∏ß', '‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à', '‡∏´‡πà‡∏ß‡∏á'],
    happy: ['‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', '‡∏î‡∏µ‡πÉ‡∏à', '‡∏™‡∏ô‡∏∏‡∏Å', '‡∏£‡∏±‡∏Å', '‡∏´‡∏ß‡∏≤‡∏ô'],
    confused: ['‡∏á‡∏á', '‡∏™‡∏±‡∏ö‡∏™‡∏ô', '‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à', '‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ']
  };

  let primaryEmotion = 'neutral';
  let maxMatches = 0;
  
  for (const [emotion, keywords] of Object.entries(emotions)) {
    const matches = keywords.filter(keyword => lowerMessage.includes(keyword)).length;
    if (matches > maxMatches) {
      maxMatches = matches;
      primaryEmotion = emotion;
    }
  }

  const intensity = Math.min(maxMatches * 3 + 2, 10);
  
  let tone = 'normal';
  if (lowerMessage.includes('!')) tone = 'urgent';
  else if (lowerMessage.includes('?')) tone = 'questioning';

  return { primary: primaryEmotion, intensity, tone };
}

function analyzeContext(message: string): ContextAnalysis {
  const lowerMessage = message.toLowerCase();
  
  let problemType = 'general';
  if (lowerMessage.includes('‡∏ó‡∏∞‡πÄ‡∏•‡∏≤‡∏∞') || lowerMessage.includes('‡πÇ‡∏ï‡πâ‡πÄ‡∏ñ‡∏µ‡∏¢‡∏á')) {
    problemType = 'conflict';
  } else if (lowerMessage.includes('‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à') || lowerMessage.includes('‡∏Ñ‡∏∏‡∏¢')) {
    problemType = 'communication';
  } else if (lowerMessage.includes('‡πÑ‡∏°‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏à') || lowerMessage.includes('‡πÇ‡∏Å‡∏´‡∏Å')) {
    problemType = 'trust';
  } else if (lowerMessage.includes('‡∏´‡∏∂‡∏á') || lowerMessage.includes('‡∏≠‡∏¥‡∏à‡∏â‡∏≤')) {
    problemType = 'jealousy';
  }

  const severity = lowerMessage.includes('‡∏ó‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß') || lowerMessage.includes('‡πÄ‡∏•‡∏¥‡∏Å') ? 'high' : 'normal';
  
  const needs = [];
  if (lowerMessage.includes('‡∏ä‡πà‡∏ß‡∏¢') || lowerMessage.includes('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')) needs.push('advice');
  if (lowerMessage.includes('‡∏ü‡∏±‡∏á') || lowerMessage.includes('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à')) needs.push('support');

  return { problemType, severity, needs: needs.length > 0 ? needs : ['support'] };
}

export async function POST(request: NextRequest) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    let userId: string;

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
      userId = decoded.userId;
    } catch {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    const { message } = await request.json();

    if (!message || typeof message !== 'string') {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const { error: userMessageError } = await supabase
      .from('ai_chat_messages')
      .insert({
        user_id: userId,
        role: 'user',
        content: message.trim()
      });

    if (userMessageError) {
      console.error('Error saving user message:', userMessageError);
    }

    const openAiApiKey = process.env.OPENAI_API_KEY;
    const emotionAnalysis = analyzeEmotion(message);
    const context = analyzeContext(message);
    
    let aiResponse: string;
    let responseSource: string;
    
    if (!openAiApiKey) {
      aiResponse = getFallbackResponse(message, emotionAnalysis, context);
      responseSource = 'fallback';
    } else {
      try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${openAiApiKey}`,
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [
              {
                role: 'system',
                content: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä" AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å üíï

üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏≠‡∏ö:
1. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å (1 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)
2. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏•‡∏±‡∏Å (1-2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)
3. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ (1 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)
4. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à (1 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)

üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
- ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: ${emotionAnalysis.primary} (${emotionAnalysis.intensity}/10)
- ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${context.problemType}
- ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${context.needs.join(', ')}

‚ö° ‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å:
- ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏Ñ‡∏≥
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
- ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ 1 ‡∏ï‡∏±‡∏ß
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
- ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ

‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏≠`
              },
              {
                role: 'user',
                content: message
              }
            ],
            temperature: 0.6,
            max_tokens: 100,
            top_p: 0.9,
            frequency_penalty: 0.3,
            presence_penalty: 0.2
          }),
        });

        if (!response.ok) {
          aiResponse = getFallbackResponse(message, emotionAnalysis, context);
          responseSource = 'fallback';
        } else {
          const data = await response.json();
          aiResponse = data.choices?.[0]?.message?.content || getFallbackResponse(message, emotionAnalysis, context);
          responseSource = 'openai';
        }
      } catch {
        aiResponse = getFallbackResponse(message, emotionAnalysis, context);
        responseSource = 'fallback';
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á AI
    const { error: aiMessageError } = await supabase
      .from('ai_chat_messages')
      .insert({
        user_id: userId,
        role: 'model',
        content: aiResponse
      });

    if (aiMessageError) {
      console.error('Error saving AI message:', aiMessageError);
    }

    return NextResponse.json({ 
      response: aiResponse,
      source: responseSource,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('AI Chat API error:', error);
    const fallbackResponse = "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡∏î‡∏π ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏Å‡∏±‡∏ô üíï";
    return NextResponse.json({ 
      response: fallbackResponse,
      source: 'fallback'
    }, { status: 200 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    let userId: string;

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
      userId = decoded.userId;
    } catch {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    // Get pagination parameters
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '50');
    const offset = (page - 1) * limit;

    // Get total count
    const { count } = await supabase
      .from('ai_chat_messages')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', userId);

    // Get paginated messages
    const { data: messages, error } = await supabase
      .from('ai_chat_messages')
      .select('id, role, content, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: true })
      .range(offset, offset + limit - 1);

    if (error) {
      return NextResponse.json({ error: 'Failed to fetch chat history' }, { status: 500 });
    }

    return NextResponse.json({ 
      messages: messages || [],
      pagination: {
        page,
        limit,
        total: count || 0,
        totalPages: Math.ceil((count || 0) / limit),
        hasNext: page * limit < (count || 0),
        hasPrev: page > 1
      }
    });

  } catch {
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
function getFallbackResponse(message: string, emotion: EmotionAnalysis, context: ContextAnalysis): string {
  const lowerMessage = message.toLowerCase();
  
  // ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
  if (lowerMessage.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || lowerMessage.includes('hi')) {
    return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏•‡∏π‡∏Å‡∏û‡∏µ‡∏ä ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? üíï";
  }

  // ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  const responses = {
    sad: {
      conflict: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏•‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≠‡∏ô‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ üíô",
      communication: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏£‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡πá‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô üå∏",
      trust: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πá‡∏ö‡πÉ‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏¢‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏ï‡∏£‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢ üíù",
      general: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏°‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏•‡∏≠‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ üå∑"
    },
    angry: {
      conflict: "‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÇ‡∏Å‡∏£‡∏ò‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏¥‡∏î‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏Å‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡∏≠‡∏∞‡πÑ‡∏£ üß°",
      communication: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Å‡∏£‡∏ò‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏±‡∏ô ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡πÜ ‡∏ü‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô üí≠",
      general: "‡πÇ‡∏Å‡∏£‡∏ò‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏ô‡∏∞ üåä"
    },
    worried: {
      trust: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏ï‡∏£‡∏á‡πÜ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏ó‡∏≥‡∏Å‡∏±‡∏ô üå±",
      general: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå ‡∏•‡∏≠‡∏á‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å üíõ"
    },
    happy: {
      general: "‡∏î‡∏µ‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç! ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡πÜ ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏ô‡∏≤‡∏ô‡πÜ ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏î‡∏µ‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô üåü"
    },
    confused: {
      communication: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏±‡∏ö‡∏™‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡πÜ ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß üîÆ",
      general: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ö‡∏™‡∏ô ‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏ö ‚≠ê"
    }
  };

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  const emotionResponses = responses[emotion.primary as keyof typeof responses];
  if (emotionResponses) {
    const contextResponse = emotionResponses[context.problemType as keyof typeof emotionResponses] || 
                           emotionResponses.general || 
                           emotionResponses[Object.keys(emotionResponses)[0] as keyof typeof emotionResponses];
    if (contextResponse) return contextResponse;
  }

  // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
  const generalResponses = [
    "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏ï‡∏£‡∏á‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏ó‡∏∏‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ üíï",
    "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î üå∏",
    "‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏•‡∏≥‡∏ö‡∏≤‡∏Å‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏≠‡∏á‡∏≠‡∏î‡∏ó‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‚ú®"
  ];
  
  return generalResponses[Math.floor(Math.random() * generalResponses.length)];
}
