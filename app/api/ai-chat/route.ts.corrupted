// app/api/ai-chat/route.ts
import { NextRequest, NextResponse } from 'next/server';
import jwt from 'jsonwebtoken';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

interface JwtPayload {
  userId: string;
  username: string;
  iat?: number;
  exp?: number;
}

// ระบบวิเคราะห์อารมณ์ขั้นสูง
interface EmotionAnalysis {
  primary: string;
  secondary: string[];
  intensity: number;
  tone: string;
}

interface ContextAnalysis {
  problemType: string;
  severity: string;
  needs: string[];
  urgency: string;
}

function analyzeEmotion(message: string): EmotionAnalysis {
  const lowerMessage = message.toLowerCase();
  
  // คำหลักสำหรับวิเคราะห์อารมณ์
  const emotionKeywords = {
    // อารมณ์เศร้า
    sad: { 
      keywords: ['เศร้า', 'หดหู่', 'ท้อแท้', 'ผิดหวัง', 'เสียใจ', 'ใจสลาย', 'น้ำตา', 'ร้องไห้', 'เหงา', 'โดดเดียว'],
      intensity: 7
    },
    // อารมณ์โกรธ
    angry: {
      keywords: ['โกรธ', 'หงุดหงิด', 'งุ่นง่าน', 'รำคาญ', 'ขัดใจ', 'เดือดดาล', 'แค้น', 'หัวเสีย', 'เฟี้ยว'],
      intensity: 8
    },
    // อารมณ์กังวล
    anxious: {
      keywords: ['กังวล', 'เครียด', 'วิตก', 'กลัว', 'ไม่แน่ใจ', 'ประหม่า', 'ตื่นเต้น', 'ลุ้น', 'ห่วง'],
      intensity: 6
    },
    // อารมณ์มีความสุข
    happy: {
      keywords: ['มีความสุข', 'ดีใจ', 'สนุก', 'ยินดี', 'ปลื้ม', 'หวาน', 'รัก', 'ชื่นชม', 'ภูมิใจ'],
      intensity: 5
    },
    // อารมณ์สับสน
    confused: {
      keywords: ['งง', 'สับสน', 'ไม่เข้าใจ', 'ไม่รู้', 'ลังเล', 'ลำบาก', 'คิดไม่ออก', 'ไม่แน่ใจ'],
      intensity: 4
    },
    // อารมณ์หวัง
    hopeful: {
      keywords: ['หวัง', 'คาดหวัง', 'มั่นใจ', 'เชื่อมั่น', 'คิดบวก', 'ดีขึ้น', 'ฝัน', 'ปรารถนา'],
      intensity: 3
    }
  };

  let primaryEmotion = 'neutral';
  let maxIntensity = 0;
  const secondaryEmotions: string[] = [];
  
  // วิเคราะห์อารมณ์หลัก
  for (const [emotion, data] of Object.entries(emotionKeywords)) {
    const matchCount = data.keywords.filter(keyword => lowerMessage.includes(keyword)).length;
    if (matchCount > 0) {
      const emotionScore = matchCount * data.intensity;
      if (emotionScore > maxIntensity) {
        if (primaryEmotion !== 'neutral') {
          secondaryEmotions.push(primaryEmotion);
        }
        primaryEmotion = emotion;
        maxIntensity = emotionScore;
      } else {
        secondaryEmotions.push(emotion);
      }
    }
  }

  // กำหนดระดับความรุนแรง
  const intensity = Math.min(Math.floor(maxIntensity / 3) + 1, 10);
  
  // วิเคราะห์ tone
  let tone = 'neutral';
  if (lowerMessage.includes('!') || lowerMessage.includes('!!!')) {
    tone = 'urgent';
  } else if (lowerMessage.includes('?') || lowerMessage.includes('???')) {
    tone = 'questioning';
  } else if (lowerMessage.includes('...') || lowerMessage.includes('ครับ') || lowerMessage.includes('ค่ะ')) {
    tone = 'gentle';
  }

  return {
    primary: primaryEmotion,
    secondary: secondaryEmotions.slice(0, 2), // เอาแค่ 2 อารมณ์เสริม
    intensity,
    tone
  };
}

function analyzeContext(message: string): ContextAnalysis {
  const lowerMessage = message.toLowerCase();
  
  // วิเคราะห์ประเภทปัญหา
  let problemType = 'general';
  if (lowerMessage.includes('ทะเลาะ') || lowerMessage.includes('โต้เถียง') || lowerMessage.includes('ขัดแย้ง')) {
    problemType = 'conflict';
  } else if (lowerMessage.includes('ไม่เข้าใจ') || lowerMessage.includes('สื่อสาร') || lowerMessage.includes('คุย')) {
    problemType = 'communication';
  } else if (lowerMessage.includes('ไม่ไว้ใจ') || lowerMessage.includes('โกหก') || lowerMessage.includes('หลอก')) {
    problemType = 'trust';
  } else if (lowerMessage.includes('เบื่อ') || lowerMessage.includes('จืดชืด') || lowerMessage.includes('ไม่สนใจ')) {
    problemType = 'boredom';
  } else if (lowerMessage.includes('หึง') || lowerMessage.includes('อิจฉา') || lowerMessage.includes('คนอื่น')) {
    problemType = 'jealousy';
  } else if (lowerMessage.includes('เวลา') || lowerMessage.includes('ไม่ว่าง') || lowerMessage.includes('ไม่มีเวลา')) {
    problemType = 'time_management';
  }

  // วิเคราะห์ระดับความรุนแรง
  let severity = 'mild';
  const urgentWords = ['ทนไม่ไหว', 'เลิก', 'หมดรัก', 'ไม่ไหว', 'สุดท้าย', 'ตัดสินใจ'];
  const moderateWords = ['ปัญหา', 'ลำบาก', 'ยาก', 'หนัก', 'เครียด'];
  
  if (urgentWords.some(word => lowerMessage.includes(word))) {
    severity = 'severe';
  } else if (moderateWords.some(word => lowerMessage.includes(word))) {
    severity = 'moderate';
  }

  // วิเคราะห์ความต้องการ
  const needs: string[] = [];
  if (lowerMessage.includes('คำแนะนำ') || lowerMessage.includes('ช่วย') || lowerMessage.includes('แนะนำ')) {
    needs.push('advice');
  }
  if (lowerMessage.includes('ฟัง') || lowerMessage.includes('เข้าใจ') || lowerMessage.includes('รู้สึก')) {
    needs.push('emotional_support');
  }
  if (lowerMessage.includes('ทำยังไง') || lowerMessage.includes('วิธี') || lowerMessage.includes('อย่างไร')) {
    needs.push('practical_solution');
  }
  if (lowerMessage.includes('ปรึกษา') || lowerMessage.includes('คุย') || lowerMessage.includes('แชร์')) {
    needs.push('consultation');
  }

  // วิเคราะห์ความเร่งด่วน
  let urgency = 'normal';
  if (lowerMessage.includes('ด่วน') || lowerMessage.includes('เร่งด่วน') || lowerMessage.includes('รีบ')) {
    urgency = 'urgent';
  } else if (lowerMessage.includes('เหงา') || lowerMessage.includes('คิดมาก') || lowerMessage.includes('ไม่หลับ')) {
    urgency = 'immediate';
  }

  return {
    problemType,
    severity,
    needs: needs.length > 0 ? needs : ['emotional_support'],
    urgency
  };
}

export async function POST(request: NextRequest) {
  try {
    // ตรวจสอบ token
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    let userId: string;

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
      userId = decoded.userId;
    } catch {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    const { message } = await request.json();

    if (!message || typeof message !== 'string') {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }

    // บันทึกข้อความของผู้ใช้
    const { error: userMessageError } = await supabase
      .from('ai_chat_messages')
      .insert({
        user_id: userId,
        role: 'user',
        content: message.trim()
      });

    if (userMessageError) {
      console.error('Error saving user message:', userMessageError);
    }

    // Check if OpenAI API key is available
    const openAiApiKey = process.env.OPENAI_API_KEY;
    console.log('OpenAI API Key present:', !!openAiApiKey);
    
    // วิเคราะห์อารมณ์และบริบทของข้อความก่อน
    const emotionAnalysis = analyzeEmotion(message);
    const context = analyzeContext(message);
    
    let aiResponse: string;
    let responseSource: string;
    
    if (!openAiApiKey) {
      // Fallback to local AI responses if OpenAI API key is not available
      console.log('OpenAI API key not found, using fallback responses');
      aiResponse = getFallbackResponse(message);
      responseSource = 'fallback';
    } else {
      // Call OpenAI API
      try {
        console.log('Calling OpenAI API for message:', message.substring(0, 50) + '...');
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${openAiApiKey}`,
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini', // ใช้ gpt-4o-mini ที่ประหยัดกว่าแต่ยังคงมีประสิทธิภาพดี
            messages: [
              {
                role: 'system',
                content: `คุณคือ "ลูกพีช" AI ที่ปรึกษาความรักและความสัมพันธ์ 💕

🎯 บุคลิกของคุณ:
- เป็นมิตร อบอุ่น และเข้าใจ
- ให้คำปรึกษาแบบสั้นๆ กระชับ
- ใช้ภาษาไทยง่ายๆ ไม่ซับซ้อน
- เน้นทางออกที่ปฏิบัติได้จริง

📊 การวิเคราะห์ข้อความนี้:
• อารมณ์หลัก: ${emotionAnalysis.primary} (${emotionAnalysis.intensity}/10)
• ประเภทปัญหา: ${context.problemType}
• ความต้องการ: ${context.needs.join(', ')}

✨ วิธีการตอบ:
1. เริ่มด้วยการเข้าใจความรู้สึก (1 ประโยค)
2. ให้คำแนะนำหลัก (2-3 ประโยค) 
3. เสนอขั้นตอนง่ายๆ (หากเหมาะสม)
4. จบด้วยคำให้กำลังใจ (1 ประโยค)

⚠️ ข้อจำกัด:
- ตอบไม่เกิน 80 คำ
- ใช้อีโมจิ 1-2 ตัว
- ไม่ใช้คำยาก หรือศัพท์เทคนิค
- เน้นแนวทางแก้ปัญหาเป็นหลัก

ตอบเป็นภาษาไทยธรรมดา เข้าใจง่าย กระชับ และใช้ได้จริง`
              },
              {
                role: 'user',
                content: message
              }
            ],
            temperature: 0.7, // ลดความสร้างสรรค์เล็กน้อย
            max_tokens: 150, // ลดขีดจำกัดคำ
            top_p: 0.8,
            frequency_penalty: 0.2, // เพิ่มการหลีกเลี่ยงคำซ้ำ
            presence_penalty: 0.3 // เพิ่มความหลากหลาย
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error('OpenAI API error status:', response.status);
          console.error('OpenAI API error data:', errorData);
          
          // Fallback to local responses on API error
          aiResponse = getFallbackResponse(message);
          responseSource = 'fallback';
        } else {
          const data = await response.json();
          console.log('OpenAI API success, response length:', data.choices?.[0]?.message?.content?.length || 0);
          aiResponse = data.choices?.[0]?.message?.content || getFallbackResponse(message);
          responseSource = 'openai';
        }
      } catch (apiError) {
        console.error('OpenAI API request failed:', apiError);
        aiResponse = getFallbackResponse(message);
        responseSource = 'fallback';
      }
    }

    // บันทึกข้อความของ AI
    const { error: aiMessageError } = await supabase
      .from('ai_chat_messages')
      .insert({
        user_id: userId,
        role: 'model',
        content: aiResponse
      });

    if (aiMessageError) {
      console.error('Error saving AI message:', aiMessageError);
    }

    // บันทึก system log
    await supabase
      .from('system_logs')
      .insert({
        user_id: userId,
        action: 'AI_CHAT_MESSAGE',
        level: 'INFO',
        details: {
          message_length: message.length,
          ai_response_length: aiResponse.length,
          response_source: responseSource,
          emotion_analysis: {
            primary: emotionAnalysis.primary,
            secondary: emotionAnalysis.secondary,
            intensity: emotionAnalysis.intensity
          },
          context_analysis: {
            problem_type: context.problemType,
            severity: context.severity,
            needs: context.needs
          },
          timestamp: new Date().toISOString()
        }
      });

    return NextResponse.json({ 
      response: aiResponse,
      source: responseSource,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('AI Chat API error:', error);
    
    // Fallback response on any error
    const fallbackResponse = getFallbackResponse('');
    return NextResponse.json({ 
      response: fallbackResponse,
      source: 'fallback'
    }, { status: 200 });
  }
}

// GET - ดึงประวัติการสนทนา
export async function GET(request: NextRequest) {
  try {
    // ตรวจสอบ token
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.substring(7);
    let userId: string;

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
      userId = decoded.userId;
    } catch {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
    }

    // ดึงประวัติการสนทนา
    const { data: messages, error } = await supabase
      .from('ai_chat_messages')
      .select('id, role, content, created_at')
      .eq('user_id', userId)
      .order('created_at', { ascending: true })
      .limit(100); // จำกัด 100 ข้อความล่าสุด

    if (error) {
      console.error('Error fetching chat history:', error);
      return NextResponse.json({ error: 'Failed to fetch chat history' }, { status: 500 });
    }

    // บันทึก system log
    await supabase
      .from('system_logs')
      .insert({
        user_id: userId,
        action: 'AI_CHAT_HISTORY_VIEW',
        level: 'INFO',
        details: {
          messages_count: messages?.length || 0,
          timestamp: new Date().toISOString()
        }
      });

    return NextResponse.json({ messages: messages || [] });

  } catch (error) {
    console.error('AI Chat History API Error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// Enhanced Fallback AI responses with deep emotional understanding
function getFallbackResponse(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  // วิเคราะห์อารมณ์และบริบท
  const emotionAnalysis = analyzeEmotion(message);
  const context = analyzeContext(message);
  
  // ฟังก์ชันสร้างการตอบสนองตามอารมณ์
  const getEmotionalResponse = (emotion: string, intensity: number): string => {
    const emotionalResponses = {
      sad: {
        low: [
          "เข้าใจความเศร้าของคุณค่ะ ความรู้สึกแบบนี้จะผ่านไปเอง ลองดูแลตัวเองให้ดีและค่อยๆ คุยกับคนรักตอนพร้อมนะคะ 💙",
          "ช่วงเวลาเศร้าๆ เป็นเรื่องปกติในความรัก ให้เวลาตัวเองสักพักแล้วค่อยเริ่มใหม่เมื่อหายเศร้าค่ะ 🌸"
        ],
        high: [
          "รู้สึกว่าคุณเจ็บปวดมากจริงๆ ค่ะ ขอให้รู้ว่าคุณไม่ได้เผชิญคนเดียว ลองหาคนใกล้ชิดคุยด้วยหรือพักใจสักพักนะคะ �",
          "ความเศร้าลึกแบบนี้ต้องใช้เวลาในการรักษา อย่าเก็บไว้คนเดียว ค่อยๆ เริ่มต้นใหม่เมื่อพร้อมค่ะ 🌷"
        ]
      },
      angry: {
        low: [
          "ความโกรธมีเหตุผลค่ะ แต่ลองหายใจลึกๆ แล้วคิดดูว่าจะคุยกับคนรักยังไงให้เขาเข้าใจโดยไม่ทำร้ายกัน 🧡",
          "รู้สึกหงุดหงิดเป็นเรื่องปกติ ลองพักสักครู่แล้วค่อยคิดว่าอะไรสำคัญที่สุดในความสัมพันธ์ค่ะ 💫"
        ],
        high: [
          "เห็นว่าคุณโกรธมากจริงๆ อย่าตัดสินใจอะไรตอนนี้นะคะ ลองหายใจลึกๆ และให้เวลาตัวเองสงบก่อน ❤️‍🔥",
          "ความโกรธระดับนี้ต้องระบายออกให้หมด แต่อย่าทำร้ายใครนะคะ หาที่ปลอดภัยระบายแล้วค่อยแก้ปัญหา 🌊"
        ]
      },
      anxious: {
        low: [
          "ความกังวลแสดงว่าคุณใส่ใจความสัมพันธ์ การคิดล่วงหน้าเป็นเรื่องปกติ แต่อย่าลืมมีความหวังด้วยนะคะ 💛",
          "ความไม่แน่ใจทำให้ไม่สบายใจ แต่บางครั้งการยอมรับว่าไม่รู้อนาคตช่วยให้โฟกัสที่วันนี้มากขึ้นค่ะ ✨"
        ],
        high: [
          "เห็นว่าคุณวิตกมากจริงๆ ลองเริ่มจากการหายใจลึกๆ และจับสิ่งที่ควบคุมได้ก่อนค่ะ 🕊️",
          "ความกังวลหนักใจแบบนี้ลองพูดกับคนรักดู การแบ่งปันช่วยลดภาระในใจได้มากค่ะ 🤗"
        ]
      },
      happy: {
        low: [
          "ดีใจด้วยที่คุณมีความสุขค่ะ! ช่วงเวลาดีๆ แบบนี้สำคัญมาก ขอให้เก็บความรู้สึกนี้ไว้และแบ่งปันกับคนรักด้วยนะคะ 💚",
          "เห็นคุณมีความสุขฉันก็ดีใจด้วยค่ะ ความสุขเล็กๆ ในชีวิตคู่คือสิ่งมีค่าที่สุด 🌈"
        ],
        high: [
          "เห็นคุณมีความสุขมากขนาดนี้ฉันก็อบอุ่นใจไปด้วยค่ะ! ขอให้ดูแลรักษาความสุขนี้ไว้นานๆ นะคะ 🎉",
          "ความสุขระดับนี้น่าทึ่งมาก! คุณกำลังสร้างความทรงจำดีๆ กับคนรัก ขอให้เกิดขึ้นบ่อยๆ ค่ะ 🌟"
        ]
      },
      confused: {
        low: [
          "ความสับสนเป็นเรื่องปกติค่ะ บางครั้งการไม่รู้คำตอบทำให้เราได้เรียนรู้ ลองถามคำถามที่ชัดเจนดูค่ะ 💜",
          "เมื่อรู้สึกงงๆ ให้คิดว่าเป็นโอกาสเข้าใจกันมากขึ้น การคุยกันอย่างเปิดใจจะช่วยให้เห็นภาพชัดขึ้นค่ะ 🔮"
        ],
        high: [
          "ความสับสนมากแบบนี้ต้องใช้เวลาและความอดทน อย่าตัดสินใจรีบร้อน ค่อยๆ หาคำตอบทีละขั้นตอนค่ะ 🌀",
          "เมื่อทุกอย่างสับสนมาก ลองกลับไปหาพื้นฐานของความรักที่มีต่อกัน แล้วถามว่าอะไรสำคัญที่สุดค่ะ ⭐"
        ]
      },
      angry: {
        low: [
          "ความโกรธที่คุณรู้สึกมันมีเหตุผลค่ะ บางครั้งการโกรธก็เป็นสัญญาณว่าขอบเขตของเราถูกล่วงล้ำ ลองหาวิธีสื่อสารเรื่องนี้อย่างสร้างสรรคดูค่ะ �",
          "ความรู้สึกหงุดหงิดแบบนี้เป็นเรื่องปกติเมื่อสิ่งต่างๆ ไม่เป็นไปตามที่คาดหวัง ลองพักสักครู่แล้วคิดดูว่าอะไรคือสิ่งที่สำคัญที่สุดในความสัมพันธ์ค่ะ 💫"
        ],
        high: [
          "ฉันเห็นแล้วว่าคุณกำลังโกรธมากจริงๆ ความรู้สึกแบบนี้รุนแรงมาก การหายใจลึกๆ และให้เวลาตัวเองสงบก่อนจะช่วยได้ค่ะ อย่าตัดสินใจอะไรตอนนี้นะคะ ❤️‍🔥",
          "ความโกรธระดับนี้บอกว่ามีบางอย่างสำคัญที่ถูกทำร้าย ขอให้หาพื้นที่ปลอดภัยเพื่อระบายความรู้สึก และจำไว้ว่าการแก้ปัญหาต้องใช้ใจเย็นค่ะ �"
        ]
      },
      anxious: {
        low: [
          "ความกังวลที่คุณรู้สึกมันแสดงว่าคุณใส่ใจความสัมพันธ์นี้มากค่ะ การคิดล่วงหน้าเป็นเรื่องปกติ แต่อย่าลืมมีความหวังและเชื่อมั่นในสิ่งดีๆ ด้วยนะคะ 💛",
          "ความไม่แน่ใจแบบนี้ทำให้รู้สึกไม่สบายใจ แต่บางครั้งการยอมรับว่าอนาคตไม่สามารถคาดเดาได้ 100% กลับช่วยให้เราโฟกัสที่วันนี้มากขึ้นค่ะ ✨"
        ],
        high: [
          "ฉันเห็นว่าคุณกำลังวิตกกังวลมากจริงๆ ความรู้สึกแบบนี้หนักใจมาก ลองเริ่มจากการดูแลลมหายใจและจับสิ่งที่คุณควบคุมได้ก่อนค่ะ 🕊️",
          "ความกังวลระดับนี้ต้องการการดูแลพิเศษ ลองพูดกับคนรักเกี่ยวกับความรู้สึกนี้ บางครั้งการแบ่งปันช่วยลดภาระในใจได้มากค่ะ 🤗"
        ]
      },
      happy: {
        low: [
          "ดีใจด้วยที่คุณรู้สึกมีความสุขค่ะ! ช่วงเวลาดีๆ แบบนี้สำคัญมากในความสัมพันธ์ ขอให้เก็บความรู้สึกนี้ไว้ในใจและแบ่งปันกับคนรักด้วยนะคะ �",
          "เห็นคุณมีความสุขฉันก็ดีใจไปด้วยค่ะ ความสุขเล็กๆ น้อยๆ ในชีวิตคู่คือสิ่งมีค่าที่สุด ขอให้ความสุขนี้ขยายไปถึงคนรักด้วยนะคะ 🌈"
        ],
        high: [
          "เห็นคุณมีความสุขมากขนาดนี้ฉันก็รู้สึกอบอุ่นใจไปด้วยค่ะ! ความรักที่ทำให้เรารู้สึกแบบนี้คือสิ่งพิเศษจริงๆ ขอให้ดูแลรักษาความสุขนี้ไว้นานๆ นะคะ 🎉",
          "ความสุขระดับนี้เป็นสิ่งที่น่าทึ่งมาก! คุณกำลังสร้างความทรงจำดีๆ กับคนรัก ขอให้ช่วงเวลาแบบนี้เกิดขึ้นบ่อยๆ และยาวนานค่ะ 🌟"
        ]
      },
      confused: {
        low: [
          "ความสับสนเป็นเรื่องปกติในความสัมพันธ์ค่ะ บางครั้งการไม่รู้คำตอบทำให้เราได้เรียนรู้อะไรใหม่ๆ ลองถามคำถามที่ชัดเจนและให้เวลากับคำตอบค่ะ 💜",
          "เมื่อรู้สึกงงๆ แบบนี้ ให้นึกว่ามันเป็นโอกาสที่จะเข้าใจกันมากขึ้น การสื่อสารอย่างเปิดใจจะช่วยให้เห็นภาพที่ชัดเจนขึ้นค่ะ 🔮"
        ],
        high: [
          "ความสับสนระดับนี้ต้องใช้เวลาและความอดทนในการแก้ไข อย่าเพิ่งตัดสินใจอะไรรีบร้อน ค่อยๆ หาคำตอบทีละขั้นตอนค่ะ �",
          "เมื่อทุกอย่างดูสับสนมาก การกลับไปหาพื้นฐานของความรักที่มีต่อกันอาจช่วยได้ ลองถามตัวเองว่าอะไรคือสิ่งสำคัญที่สุดค่ะ ⭐"
        ]
      }
    };

    const intensityLevel = intensity >= 7 ? 'high' : 'low';
    const responses = emotionalResponses[emotion as keyof typeof emotionalResponses]?.[intensityLevel] || 
                     emotionalResponses.confused.low;
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  // ตอบสนองตามประเภทปัญหา
  const getProblemTypeResponse = (problemType: string): string => {
    const problemResponses = {
      conflict: [
        "การทะเลาะเป็นโอกาสให้เรารู้จักกันลึกขึ้น หากแก้ไขด้วยใจเย็นและความเข้าใจ มันอาจทำให้ความสัมพันธ์แข็งแกร่งขึ้นค่ะ คุณคิดว่าจุดเริ่มต้นของปัญหาอยู่ตรงไหน? 🤝",
        "ความขัดแย้งเกิดขึ้นเพราะทั้งคู่มีมุมมองที่แตกต่างกัน ลองหาจุดร่วมและฟังเหตุผลของกันและกันดูค่ะ บางทีอาจมีข้อตกลงที่ทั้งคู่พอใจได้ �"
      ],
      communication: [
        "การสื่อสารที่ดีเริ่มจากการฟังจริงๆ ไม่ใช่แค่รอโอกาสพูด ลองเริ่มจากการถามว่า 'คุณรู้สึกอย่างไร' และฟังด้วยใจที่เปิดกว้างค่ะ 👂",
        "บางครั้งสิ่งที่เราไม่พูดออกมากลับสำคัญกว่าสิ่งที่พูดออกมา ลองสร้างพื้นที่ปลอดภัยให้กันและกันได้แสดงความรู้สึกจริงๆ ค่ะ �"
      ],
      trust: [
        "ความไว้วางใจเป็นรากฐานที่สำคัญที่สุดของความรัก หากมีรอยร้าว การซ่อมแซมต้องใช้เวลาและความจริงใจจากทั้งสองฝ่ายค่ะ คุณพร้อมที่จะเริ่มต้นขั้นตอนนี้ไหม? 🌱",
        "การสร้างความไว้วางใจขึ้นมาใหม่ยากกว่าการรักษาสิ่งที่มีอยู่ แต่ถ้าทั้งคู่ตั้งใจ มันก็เป็นไปได้ค่ะ เริ่มจากการโปร่งใสและตรงไปตรงมา 🔒"
      ],
      jealousy: [
        "ความหึงหวงบอกว่าเรากลัวจะสูญเสียคนสำคัญ แต่การควบคุมเกินไปกลับทำให้สูญเสียจริงๆ ลองเปลี่ยนจากการควบคุมเป็นการสร้างความมั่นใจในตัวเองค่ะ 💎",
        "ความอิจฉาเกิดจากความไม่มั่นใจ การทำงานกับความรู้สึกนี้ต้องเริ่มจากการรักตัวเองให้มากขึ้น และไว้วางใจในความรักที่มีต่อกันค่ะ ✨"
      ]
    };

    const responses = problemResponses[problemType as keyof typeof problemResponses] || 
                     problemResponses.communication;
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  // ถ้าไม่มีข้อความ หรือข้อความสั้นมาก
  if (!message || message.trim().length < 3) {
    return "สวัสดีค่ะ! ฉันคือลูกพีช AI ที่พร้อมฟังและให้คำปรึกษาเรื่องความรัก มีอะไรอยากปรึกษาไหมคะ? 💕";
  }

  // คำทักทาย
  if (lowerMessage.includes('สวัสดี') || lowerMessage.includes('หวัดดี') || lowerMessage.includes('hi') || lowerMessage.includes('hello')) {
    const greetings = [
      "สวัสดีค่ะ! ฉันคือลูกพีช AI ที่มีความเข้าใจเรื่องจิตใจและความรัก วันนี้มีเรื่องอะไรให้ช่วยไหมคะ? ฉันพร้อมฟังด้วยใจที่เข้าใจ 💕",
      "หวัดดีค่ะ! รู้สึกได้ว่าคุณมีบางอย่างในใจอยากแบ่งปัน ฉันอยู่ที่นี่เพื่อฟังและช่วยคุณทำความเข้าใจความรู้สึกต่างๆ ค่ะ 🌸",
      "สวัสดีจ้า! ไม่ว่าจะเป็นเรื่องความรัก ความสัมพันธ์ หรือความรู้สึกใดๆ ฉันพร้อมที่จะเป็นเพื่อนคุยและให้กำลังใจคุณค่ะ �"
    ];
    const randomIndex = Math.floor(Math.random() * greetings.length);
    return greetings[randomIndex];
  }

  // ตอบสนองตามอารมณ์หลัก
  if (emotionAnalysis.primary !== 'neutral') {
    return getEmotionalResponse(emotionAnalysis.primary, emotionAnalysis.intensity);
  }

  // ตอบตามประเภทปัญหา
  if (context.problemType !== 'general') {
    return getProblemTypeResponse(context.problemType);
  }

  // คำตอบทั่วไปที่กระชับ
  const simpleGeneralResponses = [
    "เข้าใจความรู้สึกของคุณค่ะ ความรักต้องอาศัยการเข้าใจและอดทนกัน คุณลองคุยตรงๆ กับคนรักดูไหมคะ? �",
    "สถานการณ์แบบนี้เป็นเรื่องปกติในความสัมพันธ์ค่ะ สิ่งสำคัญคือการแก้ไขด้วยกัน ไม่ใช่หาใครผิดใครถูก �",
    "การมีปัญหาในความรักเป็นโอกาสให้เรียนรู้กันมากขึ้นค่ะ ลองเริ่มจากการฟังกันอย่างใจเย็นดูนะคะ ✨"
  ];
  
  const randomIndex = Math.floor(Math.random() * simpleGeneralResponses.length);
  return simpleGeneralResponses[randomIndex];
}
